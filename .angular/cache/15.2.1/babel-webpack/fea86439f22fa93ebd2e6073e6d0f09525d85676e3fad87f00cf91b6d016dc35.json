{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MessageService } from 'primeng/api';\nlet IrritantsComponent = class IrritantsComponent {\n  constructor(irritantService, userService, formBuilder, messageService) {\n    this.irritantService = irritantService;\n    this.userService = userService;\n    this.formBuilder = formBuilder;\n    this.messageService = messageService;\n    this.displaySaveButton = false;\n    this.isFilterActive = false;\n    this.base64Image = undefined;\n  }\n  ngOnInit() {\n    this.initialization();\n    this.initForm();\n    this.initFilterForm();\n    this.selectedUser = null;\n    this.selectedUserName = null;\n    this.cols = [{\n      field: 'zone',\n      subfield: 'nomZone',\n      header: 'Zone',\n      sort: false\n    }, {\n      field: 'categorie',\n      subfield: 'nomCat',\n      header: 'Type',\n      sort: false\n    }, {\n      field: 'date',\n      header: 'Date',\n      sort: true\n    }, {\n      field: 'status',\n      header: 'Statut',\n      sort: false\n    }, {\n      field: 'user',\n      subfield: 'userName',\n      header: 'Déclarant',\n      sort: false\n    }];\n  }\n  initialization() {\n    this.irritantService.getStatusList().subscribe(data => {\n      this.statusList = data;\n    });\n    this.irritantService.getCategories().subscribe(data => {\n      this.typeIrritantList = data;\n    });\n    this.irritantService.getZones().subscribe(data => {\n      this.zoneList = data;\n    });\n    this.irritantService.getAll().subscribe(data => {\n      this.irritants = data;\n    });\n    this.userService.getAllUsers().subscribe(data => {\n      this.usersList = data;\n      this.usersTmp = data;\n    });\n  }\n  showWarn(qqoqcp, message) {\n    this.messageService.add({\n      severity: 'warn',\n      summary: 'erreur de saisie : ' + qqoqcp,\n      detail: message\n    });\n  }\n  showSuccess() {\n    this.messageService.add({\n      severity: 'success',\n      summary: 'enregistré',\n      detail: ''\n    });\n  }\n  initForm() {\n    this.irritantForm = this.formBuilder.group({\n      description: '',\n      photo: this.base64Image,\n      zone: this.formBuilder.group({\n        idZone: ''\n      }),\n      categorie: this.formBuilder.group({\n        idCat: ''\n      }),\n      user: this.formBuilder.group({\n        idUser: ''\n      })\n    });\n  }\n  initFilterForm() {\n    this.irritantFilterForm = this.formBuilder.group({\n      idZone: '',\n      idCat: '',\n      idUser: '',\n      status: '',\n      dateDebut: '',\n      dateFin: ''\n    });\n  }\n  selectDeclarant(user) {\n    this.selectedUser = user;\n    this.selectedUserName = user.userName;\n  }\n  ajouterIrritant() {\n    if (this.irritantForm.value.categorie.idCat == 0) {\n      this.showWarn(\"Quoi\", \"le type de l'irritant est manquant\");\n    } else if (this.irritantForm.value.zone.idZone == 0) {\n      this.showWarn(\"Où\", \"la zone est manquante\");\n    } else if (this.irritantForm.value.description.length == 0) {\n      this.showWarn(\"Comment\", \"la description est manquante\");\n    } else if (this.selectedUser == null) {\n      this.showWarn(\"Qui\", \"saisir le déclarant\");\n    } else {\n      this.irritantForm.get('user.idUser').setValue(this.selectedUser.idUser);\n      this.irritantService.addIrritant(this.irritantForm.value).subscribe(() => {\n        this.resetForm();\n      });\n      window.location.reload();\n      this.showSuccess();\n    }\n  }\n  filtrerIrritant() {\n    this.irritantFilterForm.get('idUser').setValue(this.selectedUser.idUser);\n    this.irritantFilterForm.get('dateDebut').setValue(this.rangeDatesFilter.value[0]);\n    this.irritantFilterForm.get('dateFin').setValue(this.rangeDatesFilter.value[1]);\n    console.log(this.irritantFilterForm.value);\n    this.irritantService.filtrerIrritants(this.irritantFilterForm.value).subscribe(data => {\n      this.irritants = data;\n      $(\"#filtrerModal\").modal(\"hide\");\n      this.isFilterActive = true;\n    });\n  }\n  resetForm() {\n    this.irritantForm.reset();\n    this.selectedUser = null;\n    this.selectedUserName = null;\n    this.usersTmp = this.usersList;\n    this.inputSearchUserAddIrritant.nativeElement.value = null;\n  }\n  resetFilterForm() {\n    this.irritantFilterForm.reset();\n    this.selectedUser = null;\n    this.selectedUserName = null;\n    this.usersTmp = this.usersList;\n    this.inputSearchUserFilterIrritant.nativeElement.value = null;\n    this.rangeDatesFilter.inputFieldValue = null;\n    this.rangeDatesFilter.value = null;\n    this.isFilterActive = false;\n    this.irritantService.getAll().subscribe(data => {\n      this.irritants = data;\n    });\n  }\n  filtrerUserList(evt) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const searchTerm = evt.srcElement.value;\n      this.usersTmp = this.usersList;\n      if (!searchTerm) {\n        return;\n      }\n      this.usersTmp = this.usersTmp.filter(user => {\n        if (user.userName && searchTerm) {\n          return user.userName.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1;\n        }\n      });\n    });\n  }\n  setStatus(status) {\n    this.selectedIrritant.status = status;\n    this.displaySaveButton = true;\n  }\n  getSelectedIrritant(irritant) {\n    this.selectedIrritant = irritant;\n    this.selectedIrritantID = irritant.idIrritant;\n    this.displaySaveButton = false;\n  }\n  saveChanges() {\n    this.irritantService.updateIrritantStatus(this.selectedIrritant).subscribe(() => {\n      document.location.reload();\n    });\n  }\n  supprimerIrritant() {\n    this.irritantService.deleteIrritant(this.selectedIrritantID).subscribe(() => {\n      document.location.reload();\n    });\n  }\n  customSort(event) {\n    event.data.sort((data1, data2) => {\n      let value1 = data1[event.field];\n      let value2 = data2[event.field];\n      let result = null;\n      if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;else if (typeof value1 === 'string' && typeof value2 === 'string') result = value1.localeCompare(value2);else result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;\n      return event.order * result;\n    });\n  }\n};\n__decorate([ViewChild('inputSearchUserFilterIrritant')], IrritantsComponent.prototype, \"inputSearchUserFilterIrritant\", void 0);\n__decorate([ViewChild('inputSearchUserAddIrritant')], IrritantsComponent.prototype, \"inputSearchUserAddIrritant\", void 0);\n__decorate([ViewChild('rangeDatesFilter')], IrritantsComponent.prototype, \"rangeDatesFilter\", void 0);\nIrritantsComponent = __decorate([Component({\n  selector: 'app-irritants',\n  templateUrl: './irritants.component.html',\n  styleUrls: ['./irritants.component.css'],\n  providers: [MessageService]\n})], IrritantsComponent);\nexport { IrritantsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}