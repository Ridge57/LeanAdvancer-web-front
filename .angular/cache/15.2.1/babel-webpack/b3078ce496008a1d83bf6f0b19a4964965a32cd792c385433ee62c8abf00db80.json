{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ChecklistVoirComponent = class ChecklistVoirComponent {\n  constructor(zoneService, checklistService, formBuilder) {\n    this.zoneService = zoneService;\n    this.checklistService = checklistService;\n    this.formBuilder = formBuilder;\n    this.selectedTache = undefined;\n    this.newTitleForSelectedTache = \"\";\n    this.newDescriptionForSelectedTache = \"\";\n    this.filteredTaches = [];\n    this.imgChangedMap = new Map(); //id tache, base64 img\n    this.base64File = \"\";\n    this.editMode = false;\n    this.selectedPeriods = [];\n    this.filteredPeriod = \"\";\n    this.periods = [];\n    this.numberTaskByPeriod = new Map();\n    this.chargeTableView = false;\n    this.defaultImg = \"src\\assets\\img\\no-image.png\";\n    this.toBase64 = file => new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = error => reject(error);\n    });\n  }\n  ngOnInit() {\n    this.defaultImg = \"src\\assets\\img\\no-image.png\";\n    this.isVisible = false;\n    this.selectedZone = null;\n    this.getAllZones();\n    this.initForm();\n    this.initPeriods();\n  }\n  filtrerLesTaches(e) {\n    console.log(e.value.code);\n    this.filteredTaches = [];\n    for (const tache of this.tachesForSelectedZone) {\n      for (const period of tache.periods) {\n        if (period == e.value.code) {\n          this.filteredTaches.push(tache);\n        }\n      }\n    }\n  }\n  initPeriods() {\n    this.periods = [{\n      jour: 'lundi',\n      equipe: [{\n        cname: 'lundi matin',\n        code: 'lundi-M'\n      }, {\n        cname: 'lundi soir',\n        code: 'lundi-S'\n      }, {\n        cname: 'lundi nuit',\n        code: 'lundi-N'\n      }]\n    }, {\n      jour: 'mardi',\n      equipe: [{\n        cname: 'mardi matin',\n        code: 'mardi-M'\n      }, {\n        cname: 'mardi soir',\n        code: 'mardi-S'\n      }, {\n        cname: 'mardi nuit',\n        code: 'mardi-N'\n      }]\n    }, {\n      jour: 'mercredi',\n      equipe: [{\n        cname: 'mercredi matin',\n        code: 'mercredi-M'\n      }, {\n        cname: 'mercredi soir',\n        code: 'mercredi-S'\n      }, {\n        cname: 'mercredi nuit',\n        code: 'mercredi-N'\n      }]\n    }, {\n      jour: 'jeudi',\n      equipe: [{\n        cname: 'jeudi matin',\n        code: 'jeudi-M'\n      }, {\n        cname: 'jeudi soir',\n        code: 'jeudi-S'\n      }, {\n        cname: 'jeudi nuit',\n        code: 'jeudi-N'\n      }]\n    }, {\n      jour: 'vendredi',\n      equipe: [{\n        cname: 'vendredi matin',\n        code: 'vendredi-M'\n      }, {\n        cname: 'vendredi soir',\n        code: 'vendredi-S'\n      }, {\n        cname: 'vendredi nuit',\n        code: 'vendredi-N'\n      }]\n    }, {\n      jour: 'samedi',\n      equipe: [{\n        cname: 'samedi matin',\n        code: 'samedi-M'\n      }, {\n        cname: 'samedi soir',\n        code: 'samedi-S'\n      }, {\n        cname: 'samedi nuit',\n        code: 'samedi-N'\n      }]\n    }, {\n      jour: 'dimanche',\n      equipe: [{\n        cname: 'dimanche matin',\n        code: 'dimanche-M'\n      }, {\n        cname: 'dimanche soir',\n        code: 'dimanche-S'\n      }, {\n        cname: 'dimanche nuit',\n        code: 'dimanche-N'\n      }]\n    }];\n  }\n  setVisible(id) {\n    this.selectedZoneID = id;\n    var i = 0;\n    this.selectedZone = null;\n    while (this.selectedZone == null || i < this.zones.length) {\n      if (this.selectedZoneID == this.zones[i].idZone) {\n        this.selectedZone = this.zones[i];\n      }\n      i++;\n    }\n    this.isVisible = true;\n    this.formTache.get('zone.idZone').setValue(this.selectedZoneID);\n    this.getTachesByZone(this.selectedZone);\n  }\n  handleChange(e) {\n    if (e.target.checked) {\n      this.selectedPeriods.push(e.target.defaultValue);\n    } else {\n      const index = this.selectedPeriods.indexOf(e.target.defaultValue);\n      const x = this.selectedPeriods.splice(index, 1);\n    }\n  }\n  resetSelectedPeriod() {\n    this.selectedPeriods = [];\n  }\n  changePeriods() {\n    this.selectedTache.periods = this.selectedPeriods;\n  }\n  resetAjoutIrrForm() {\n    this.formTache.reset();\n    this.selectedPeriods = [];\n    this.base64File = \"\";\n  }\n  isPeriodChecked(p) {\n    var t = Object.keys(this.selectedTache).length !== 0 ? this.selectedTache.periods.indexOf(p) > 0 : false;\n    console.log(this.selectedTache);\n    console.log(Object.keys(this.selectedTache).length);\n    console.log(Object.keys(this.selectedTache).length !== 0);\n    if (t) {\n      console.log(this.selectedTache);\n    }\n    return true;\n  }\n  switchTableView(e) {\n    this.chargeTableView = e.checked;\n  }\n  initForm() {\n    this.formTache = this.formBuilder.group({\n      titre: '',\n      description: '',\n      photo: '',\n      zone: this.formBuilder.group({\n        idZone: ''\n      }),\n      periods: []\n    });\n  }\n  setNewImageForNewTache(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.base64File = yield this.toBase64(event.target.files[0]);\n      this.formTache.controls['photo'].setValue(this.base64File);\n    });\n  }\n  addNewTask() {\n    this.formTache.get('periods').setValue(this.selectedPeriods);\n    this.checklistService.addNewTask(this.formTache.value).subscribe(() => {\n      this.getTachesByZone(this.selectedZone);\n      this.resetAjoutIrrForm();\n    });\n  }\n  getAllZones() {\n    this.zoneService.getAllZones().subscribe(data => {\n      this.zones = data;\n    });\n  }\n  getTachesByZone(zone) {\n    this.checklistService.getTachesByZone(zone).subscribe(data => {\n      this.tachesForSelectedZone = data;\n      this.filteredTaches = data;\n      this.setNumberOfTakPeriod(this.tachesForSelectedZone);\n    });\n  }\n  setNumberOfTakPeriod(taches) {\n    this.numberTaskByPeriod.set('lundi-M', 0);\n    this.numberTaskByPeriod.set('lundi-S', 0);\n    this.numberTaskByPeriod.set('lundi-N', 0);\n    this.numberTaskByPeriod.set('mardi-M', 0);\n    this.numberTaskByPeriod.set('mardi-S', 0);\n    this.numberTaskByPeriod.set('mardi-N', 0);\n    this.numberTaskByPeriod.set('mercredi-M', 0);\n    this.numberTaskByPeriod.set('mercredi-S', 0);\n    this.numberTaskByPeriod.set('mercredi-N', 0);\n    this.numberTaskByPeriod.set('jeudi-M', 0);\n    this.numberTaskByPeriod.set('jeudi-S', 0);\n    this.numberTaskByPeriod.set('jeudi-N', 0);\n    this.numberTaskByPeriod.set('vendredi-M', 0);\n    this.numberTaskByPeriod.set('vendredi-S', 0);\n    this.numberTaskByPeriod.set('vendredi-N', 0);\n    this.numberTaskByPeriod.set('samedi-M', 0);\n    this.numberTaskByPeriod.set('samedi-S', 0);\n    this.numberTaskByPeriod.set('samedi-N', 0);\n    this.numberTaskByPeriod.set('dimanche-M', 0);\n    this.numberTaskByPeriod.set('dimanche-N', 0);\n    this.numberTaskByPeriod.set('dimanche-S', 0);\n    for (const tache of taches) {\n      for (const period of tache.periods) {\n        this.numberTaskByPeriod.set(period, this.numberTaskByPeriod.get(period) + 1);\n      }\n    }\n  }\n  setEditMode(tache) {\n    this.editMode = true;\n    //this.editModeGlobal=true\n    this.selectedTache = tache;\n    this.selectedTacheID = tache.idTache;\n    this.newTitleForSelectedTache = tache.titre;\n    this.newDescriptionForSelectedTache = tache.description;\n  }\n  launchDeleteModal(tache) {\n    this.selectedTache = tache;\n  }\n  deleteTask() {\n    this.checklistService.deleteTache(this.selectedTache.idTache).subscribe(() => {\n      this.getTachesByZone(this.selectedZone);\n    });\n  }\n  resetEditMode(tache) {\n    this.editMode = false;\n    this.selectedTacheID = \"\";\n    this.newTitleForSelectedTache = \"\";\n    this.newDescriptionForSelectedTache = \"\";\n  }\n  setNewDescription(val) {\n    this.newDescriptionForSelectedTache = val.srcElement.value;\n  }\n  setNewTitle(val) {\n    this.newTitleForSelectedTache = val.srcElement.value;\n  }\n  setNewImage(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.base64File = yield this.toBase64(event.target.files[0]);\n      this.imgChangedMap.set(this.selectedTacheID, this.base64File);\n    });\n  }\n  saveTaskChange() {\n    /*enregistrement des changements dans les titres et les descriptions*/\n    this.selectedTache.titre = this.newTitleForSelectedTache;\n    this.selectedTache.description = this.newDescriptionForSelectedTache;\n    this.checklistService.saveTache(this.selectedTache).subscribe(() => {\n      this.getTachesByZone(this.selectedZone);\n    });\n    /*enregistrement de la nouvelle image*/\n    // const convMap = {};\n    // this.imgChangedMap.forEach((val: string, key: number) => {\n    //   convMap[key] = val;\n    // });\n    // this.checklistService.updateImageForTask(convMap).subscribe(() => {\n    //   this.imgChangedMap.clear()\n    //   this.getTachesByZone(this.selectedZone)\n    // })\n    this.editMode = false;\n  }\n};\nChecklistVoirComponent = __decorate([Component({\n  selector: 'app-checklist-voir',\n  templateUrl: './checklist-voir.component.html',\n  styleUrls: ['./checklist-voir.component.css']\n})], ChecklistVoirComponent);\nexport { ChecklistVoirComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}