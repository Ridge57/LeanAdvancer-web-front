{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { MessageService, ConfirmationService } from 'primeng/api';\nlet StandardAjouterComponent = class StandardAjouterComponent {\n  constructor(sanitizer, zoneService, standardService, formBuilder, confirmationService, messageService) {\n    this.sanitizer = sanitizer;\n    this.zoneService = zoneService;\n    this.standardService = standardService;\n    this.formBuilder = formBuilder;\n    this.confirmationService = confirmationService;\n    this.messageService = messageService;\n    this.isTitleVisible = false;\n    this.isStepListVisible = false;\n    this.isSaveButtonVisible = false;\n    this.titre = \"\";\n    this.selectedMedia = \"\";\n    this.toBase64 = file => new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = error => reject(error);\n    });\n  }\n  ngOnInit() {\n    this.getZones();\n    this.initForm();\n    this.products = [];\n    this.mediaOptions = [{\n      icon: 'pi pi-ban',\n      value: 'none'\n    }, {\n      icon: 'pi pi-image',\n      value: 'img'\n    }, {\n      icon: 'pi pi-video',\n      value: 'vid'\n    }];\n  }\n  showDisplayVideoDialog(product) {\n    this.product = Object.assign({}, product);\n    this.isDisplayVideoVisible = true;\n  }\n  getZones() {\n    this.zoneService.getAllZones().subscribe(data => {\n      this.zones = data;\n    });\n  }\n  initForm() {\n    this.formStd = this.formBuilder.group({\n      titre: '',\n      date: '',\n      lien: '',\n      zone: this.formBuilder.group({\n        idZone: ''\n      })\n    });\n  }\n  onUpload(event, typ) {\n    this.product.file = event.target.files[0];\n    if (typ === \"img\") {\n      this.product.imgUrl = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(this.product.file));\n    } else if (typ === \"vid\") {\n      this.product.vidUrl = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(this.product.file));\n    }\n  }\n  selectionMediaChange() {\n    this.product.imgUrl = null;\n    this.product.vidUrl = null;\n    this.product.file = null;\n  }\n  fileChange(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      //this.uploadedFile = event.target.value\n      this.base64File = yield this.toBase64(event.target.files[0]);\n      this.formStd.get('lien').setValue(this.base64File);\n    });\n  }\n  sauvegarder() {\n    this.standardService.saveStandard(this.formStd.value).subscribe(() => {\n      //this.uploadedFile = undefined\n      this.formStd.reset();\n    });\n  }\n  annuler() {\n    this.isTitleVisible = false;\n    this.isStepListVisible = false;\n    this.product.file = null;\n    this.titre = \"\";\n    this.formStd.reset();\n  }\n  ajouter() {\n    this.isTitleVisible = true;\n  }\n  titleChange(val) {\n    this.titre = val;\n    this.formStd.get('titre').setValue(val);\n  }\n  zoneChange(val) {\n    this.formStd.get('zone.idZone').setValue(val);\n    this.isStepListVisible = true;\n  }\n  openNew() {\n    this.product = {};\n    this.submitted = false;\n    this.productDialog = true;\n  }\n  deleteSelectedProducts() {\n    this.confirmationService.confirm({\n      message: 'Êtes-vous sûr de vouloir supprimer cette étape ?',\n      header: 'Confirm',\n      icon: 'pi pi-exclamation-triangle',\n      accept: () => {\n        this.products = this.products.filter(val => !this.selectedProducts.includes(val));\n        this.selectedProducts = null;\n        this.messageService.add({\n          severity: 'success',\n          summary: 'Successful',\n          detail: 'Products Deleted',\n          life: 3000\n        });\n      }\n    });\n  }\n  editProduct(product) {\n    this.product = Object.assign({}, product);\n    if (this.product.imgUrl) {\n      this.selectedMedia = 'img';\n    } else if (this.product.vidUrl) {\n      this.selectedMedia = 'vid';\n    } else {\n      this.selectedMedia = 'none';\n    }\n    this.productDialog = true;\n  }\n  deleteProduct(product) {\n    this.confirmationService.confirm({\n      message: \"Êtes-vous sûr de vouloir supprimer l'étape : \" + product.description + \"?\",\n      header: 'Confirm',\n      icon: 'pi pi-exclamation-triangle',\n      accept: () => {\n        this.products = this.products.filter(val => val.id !== product.id);\n        this.product = {};\n        this.messageService.add({\n          severity: 'success',\n          summary: 'supprimé',\n          life: 3000\n        });\n      }\n    });\n  }\n  hideDialog() {\n    this.product = {};\n    this.selectedMedia = \"\";\n    this.productDialog = false;\n    this.submitted = false;\n  }\n  saveProduct() {\n    this.submitted = true;\n    if (!this.product.description) {\n      this.messageService.add({\n        severity: 'error',\n        detail: 'la description est obligatoire',\n        life: 3000\n      });\n    } else if (this.selectedMedia.length === 0) {\n      this.messageService.add({\n        severity: 'error',\n        detail: 'Veuillez sélectionner le type de média (aucun, image, vidéo)',\n        life: 3000\n      });\n    } else if (this.selectedMedia === 'img' && !this.product.imgUrl) {\n      this.messageService.add({\n        severity: 'error',\n        detail: \"Veuillez insérer une image ou sélectionner l'option aucun média\",\n        life: 3000\n      });\n    } else if (this.selectedMedia === 'vid' && !this.product.vidUrl) {\n      this.messageService.add({\n        severity: 'error',\n        detail: \"Veuillez insérer une vidéo ou sélectionner l'option aucun média\",\n        life: 3000\n      });\n    } else if (this.selectedMedia === 'vid' && this.product.file.size > 25000000) {\n      //25MB\n      this.messageService.add({\n        severity: 'error',\n        detail: \"La vidéo dépasse la limite de 25MB\",\n        life: 3000\n      });\n    } else {\n      this.save();\n    }\n  }\n  save() {\n    if (this.product.id) {\n      this.products[this.findIndexById(this.product.id)] = this.product;\n    } else {\n      this.product.id = this.createId();\n      this.products.push(this.product);\n    }\n    this.products = [...this.products];\n    this.productDialog = false;\n    this.product = {};\n    this.selectedMedia = \"\";\n  }\n  findIndexById(id) {\n    let index = -1;\n    for (let i = 0; i < this.products.length; i++) {\n      if (this.products[i].id === id) {\n        index = i;\n        break;\n      }\n    }\n    return index;\n  }\n  createId() {\n    let id = '';\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (var i = 0; i < 5; i++) {\n      id += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return id;\n  }\n};\nStandardAjouterComponent = __decorate([Component({\n  selector: 'app-standard-ajouter',\n  templateUrl: './standard-ajouter.component.html',\n  styleUrls: ['./standard-ajouter.component.scss'],\n  styles: [`\n  :host ::ng-deep .p-dialog .product-image {\n      width: 150px;\n      margin: 0 auto 2rem auto;\n      display: block;\n  }\n`],\n  providers: [MessageService, ConfirmationService]\n})], StandardAjouterComponent);\nexport { StandardAjouterComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}